/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

package mpin

/*
#cgo CFLAGS:  -std=c99 -O3 -I. -I@CMAKE_INSTALL_PREFIX@/include
#cgo LDFLAGS: -L. -L@CMAKE_INSTALL_PREFIX@/lib -lmpin  -lamcl -lm
#include <stdio.h>
#include <stdlib.h>
#include "amcl.h"
#include "randapi.h"
#include "mpin.h"
#include "utils.h"
*/
import "C"
import (
	"encoding/hex"
	"fmt"
	"unsafe"
)

const PAS int = int(C.PAS)
const PGS int = int(C.PGS)
const PFS int = int(C.PFS)
const hashBytes int = int(C.PFS)
const IVS int = 12
const G1S = 2*PFS + 1
const G2S = 4 * PFS
const GTS = 12 * PFS

//  Hash function choice
const SHA256 int = 32
const SHA384 int = 48
const SHA512 int = 64

// OctetFree frees memory associated with an octet
func OctetFree(valOctet *C.octet) {
	C.free(unsafe.Pointer(valOctet.val))
}

// GetOctetZero forms an empty octet
func GetOctetZero(lenStr int) C.octet {
	valBytes := make([]byte, lenStr)
	val := string(valBytes)
	valCS := C.CString(val)
	lenCS := C.int(lenStr)
	octetVal := C.octet{lenCS, lenCS, valCS}
	return octetVal
}

// GetOctet forms an octet from a string
func GetOctet(valStr string) C.octet {
	valCS := C.CString(valStr)
	lenCS := C.int(len(valStr))
	octetVal := C.octet{lenCS, lenCS, valCS}
	return octetVal
}

// GetOctetHex forms an octet from a hex string
func GetOctetHex(valHex string) C.octet {
	valBytes, err := hex.DecodeString(valHex)
	if err != nil {
		octetVal := GetOctetZero(0)
		return octetVal
	}
	valStr := string(valBytes)
	octetVal := GetOctet(valStr)
	return octetVal
}

// OctetLen gets length in bytes of an octet
func OctetLen(valOctet *C.octet) int {
	return int(valOctet.len)
}

// OctetToString convert an octet to a string
func OctetToString(valOct *C.octet) string {
	dstLen := OctetLen(valOct)
	dstBytes := make([]byte, dstLen)
	dstStr := string(dstBytes)
	dst := C.CString(dstStr)
	C.OCT_toStr(valOct, dst)
	dstStr = C.GoStringN(dst, valOct.len)
	C.free(unsafe.Pointer(dst))
	return dstStr
}

// OctetToBytes convert an octet to bytes
func OctetToBytes(valOct *C.octet) []byte {
	dstLen := OctetLen(valOct)
	dstBytes := make([]byte, dstLen)
	dstStr := string(dstBytes)
	dst := C.CString(dstStr)
	C.OCT_toStr(valOct, dst)
	dstStr = C.GoStringN(dst, valOct.len)
	C.free(unsafe.Pointer(dst))
	dstBytes = []byte(dstStr)
	return dstBytes
}

// OctetToHex convert an octet to a hex string
func OctetToHex(valOctet *C.octet) string {
	dstLen := OctetLen(valOctet)
	dstBytes := make([]byte, hex.EncodedLen(dstLen))
	dstStr := string(dstBytes)
	dst := C.CString(dstStr)
	C.OCT_toHex(valOctet, dst)
	dstStr = C.GoString(dst)
	C.free(unsafe.Pointer(dst))
	return dstStr
}

/*

Today returns today's date as days elapsed from the epoch. This function uses the system clock

Args:

Returns:

    epochDate: epoch days
*/
func Today() int {
	epochDate := C.MPIN_today()
	return int(epochDate)
}

/*

GetTime returns time elapsed from the epoch. This function uses the system clock

Args:

Returns:

    epochTime: epoch time

*/
func GetTime() int {
	epochTime := C.MPIN_GET_TIME()
	return int(epochTime)
}

/*

CreateCSPRNG makes a cryptographically secure pseudo-random number generator instance

Args:

    seed:   random seed value

Returns:

    RNG: Pointer to cryptographically secure pseudo-random number generator instance

*/
func CreateCSPRNG(SEED []byte) C.csprng {
	// Form Octet
	SEEDStr := string(SEED)
	SEEDOct := GetOctet(SEEDStr)
	defer OctetFree(&SEEDOct)
	var RNG C.csprng
	C.CREATE_CSPRNG(&RNG, &SEEDOct)
	return RNG
}

/*

HashId hashs an M-Pin Identity

Args:

    hashType: Hash function
    mpinId:   An octet pointer containing the M-Pin ID

Returns:

    hashMPinId: hash of the M-Pin ID

*/
func HashId(hashType int, mpinId []byte) (hashMPinId []byte) {
	// Form Octets
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)
	hashMPinIdOct := GetOctetZero(hashBytes)
	defer OctetFree(&hashMPinIdOct)

	// Hash MPIN_ID
	C.MPIN_HASH_ID(C.int(hashType), &mpinIdOct, &hashMPinIdOct)

	// Convert octet to bytes
	hashMPinId = OctetToBytes(&hashMPinIdOct)

	return hashMPinId
}

/*

RandomGenerate returns a random integer where s < q is the order of the group of points on the curve.

Args:

    RNG: Pointer to cryptographically secure pseudo-random number generator instance

Returns:

    errorCode: error from the C function
    s: random group element

*/
func RandomGenerate(RNG *C.csprng) (errorCode int, S []byte) {
	// Form Octet
	SOct := GetOctetZero(PGS)
	defer OctetFree(&SOct)

	rtn := C.MPIN_RANDOM_GENERATE(RNG, &SOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	S = OctetToBytes(&SOct)

	return errorCode, S[:]
}

/*

GetServerSecret creates a server secret in G2 from a master secret

Args:

    masterSecret:   An octet pointer to the master secret

Returns:

    errorCode: error from the C function
    serverSecret: Server secret

*/
func GetServerSecret(masterSecret []byte) (errorCode int, serverSecret []byte) {
	// Form Octets
	masterSecretStr := string(masterSecret)
	masterSecretOct := GetOctet(masterSecretStr)
	defer OctetFree(&masterSecretOct)
	serverSecretOct := GetOctetZero(G2S)
	defer OctetFree(&serverSecretOct)

	rtn := C.MPIN_GET_SERVER_SECRET(&masterSecretOct, &serverSecretOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	serverSecret = OctetToBytes(&serverSecretOct)

	return errorCode, serverSecret[:]
}

/*

RecombineG1 adds two members from the group G1

Args:

    R1: An input member of G1
    R2: An input member of G1

Returns:

    errorCode: error from the C function
    R: An output member of G1; R = Q1+Q2

*/
func RecombineG1(R1 []byte, R2 []byte) (errorCode int, R []byte) {
	// Form Octets
	R1Str := string(R1)
	R1Oct := GetOctet(R1Str)
	defer OctetFree(&R1Oct)
	R2Str := string(R2)
	R2Oct := GetOctet(R2Str)
	defer OctetFree(&R2Oct)
	ROct := GetOctetZero(G1S)
	defer OctetFree(&ROct)

	rtn := C.MPIN_RECOMBINE_G1(&R1Oct, &R2Oct, &ROct)
	errorCode = int(rtn)

	// Convert octet to bytes
	R = OctetToBytes(&ROct)

	return errorCode, R[:]
}

/*

RecombineG2 adds two members from the group G2

Args:

    W1: An input member of G2
    W2: An input member of G2

Returns:

    errorCode: error from the C function
    W: An output member of G2; W = W1+W2

*/
func RecombineG2(W1 []byte, W2 []byte) (errorCode int, W []byte) {
	// Form Octets
	W1Str := string(W1)
	W1Oct := GetOctet(W1Str)
	defer OctetFree(&W1Oct)
	W2Str := string(W2)
	W2Oct := GetOctet(W2Str)
	defer OctetFree(&W2Oct)
	WOct := GetOctetZero(G2S)
	defer OctetFree(&WOct)

	rtn := C.MPIN_RECOMBINE_G2(&W1Oct, &W2Oct, &WOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	W = OctetToBytes(&WOct)

	return errorCode, W[:]
}

/*

GetClientSecret creates a client secret in G1 from a master secret and the hash of the M-Pin Id

Args:

    masterSecret:  An octet pointer to the master secret
    hashMPinId:    An octet pointer to the hash of the M-Pin ID

Returns:

    errorCode: error from the C function
    clientSecret: Client secret

*/
func GetClientSecret(masterSecret []byte, hashMPinId []byte) (errorCode int, clientSecret []byte) {
	// Form Octets
	masterSecretStr := string(masterSecret)
	masterSecretOct := GetOctet(masterSecretStr)
	defer OctetFree(&masterSecretOct)
	hashMPinIdStr := string(hashMPinId)
	hashMPinIdOct := GetOctet(hashMPinIdStr)
	defer OctetFree(&hashMPinIdOct)
	clientSecretOct := GetOctetZero(G1S)
	defer OctetFree(&clientSecretOct)

	rtn := C.MPIN_GET_CLIENT_SECRET(&masterSecretOct, &hashMPinIdOct, &clientSecretOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	clientSecret = OctetToBytes(&clientSecretOct)

	return errorCode, clientSecret[:]
}

/*

GetClientPermit creates a time permit in G1 from a master secret, hash of the M-Pin Id and epoch days

Args:

    hashType:      Hash function
    epochDate:     Epoch days
    masterSecret:  An octet pointer to the master secret
    hashMPinId:    An octet pointer to the hash of the M-Pin ID

Returns:

    errorCode: error from the C function
    timePermit: Time permit

*/
func GetClientPermit(hashType, epochDate int, masterSecret, hashMPinId []byte) (errorCode int, timePermit []byte) {
	// Form Octets
	masterSecretmasterSecretStr := string(masterSecret)
	masterSecretOct := GetOctet(masterSecretmasterSecretStr)
	defer OctetFree(&masterSecretOct)
	hashMPinIdStr := string(hashMPinId)
	hashMPinIdOct := GetOctet(hashMPinIdStr)
	defer OctetFree(&hashMPinIdOct)
	timePermitOct := GetOctetZero(G1S)
	defer OctetFree(&timePermitOct)

	rtn := C.MPIN_GET_CLIENT_PERMIT(C.int(hashType), C.int(epochDate), &masterSecretOct, &hashMPinIdOct, &timePermitOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	timePermit = OctetToBytes(&timePermitOct)

	return errorCode, timePermit[:]
}

/*

ExtractPIN extracts a PIN from the client secret

Args:

    hashType: Hash function
    mpinId:   M-Pin ID
    PIN:   PIN input by user
    clientSecret: User's client secret

Returns:

    errorCode: error from the C function
    token: Result of extracting a PIN from client secret

*/
func ExtractPIN(hashType int, mpinId []byte, PIN int, clientSecret []byte) (errorCode int, token []byte) {
	// Form Octets
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)
	clientSecretStr := string(clientSecret)
	clientSecretOct := GetOctet(clientSecretStr)
	defer OctetFree(&clientSecretOct)

	rtn := C.MPIN_EXTRACT_PIN(C.int(hashType), &mpinIdOct, C.int(PIN), &clientSecretOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	token = OctetToBytes(&clientSecretOct)

	return errorCode, token[:]
}

/*

Client performs client side of the one-pass version of the M-Pin protocol. If Time Permits are
disabled then set epoch_date = 0.In this case UT is not generated and can be set to nil.
If Time Permits are enabled, and PIN error detection is OFF, U is not generated and
can be set to nil. If Time Permits are enabled and PIN error detection is ON then U
and UT are both generated.

Args:

    hashType: Hash function
    epochDate: Date, in days since the epoch. Set to 0 if Time permits disabled
    mpinId: M-Pin ID
    RNG: cryptographically secure random number generator
    pin: PIN entered by user
    token: M-Pin token
    timePermit: M-Pin time permit
    message: message to be signed
    epochTime: Epoch time in seconds

Returns:

    errorCode: error from the C function
    x: Randomly generated integer if R!=nil, otherwise must be provided as an input
    U: U = x.H(ID)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))
    V: V = -(x+y)(CS+TP), where CS is the reconstructed client secret and TP is the time permit
    y: y = H(t|U) or y = H(t|UT) if Time Permits enabled where is t is epoch time
*/
func Client(hashType, epochDate int, mpinId []byte, RNG *C.csprng, x []byte, PIN int, token []byte, timePermit []byte, message []byte, epochTime int) (errorCode int, xOut, y, V, U, UT []byte) {
	// Form Octets
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)
	xStr := string(x)
	xOct := GetOctet(xStr)
	defer OctetFree(&xOct)
	tokenStr := string(token)
	tokenOct := GetOctet(tokenStr)
	defer OctetFree(&tokenOct)
	timePermitStr := string(timePermit)
	timePermitOct := GetOctet(timePermitStr)
	defer OctetFree(&timePermitOct)
	messageStr := string(message)
	messageOct := GetOctet(messageStr)
	defer OctetFree(&messageOct)

	VOct := GetOctetZero(G1S)
	defer OctetFree(&VOct)
	UOct := GetOctetZero(G1S)
	defer OctetFree(&UOct)
	UTOct := GetOctetZero(G1S)
	defer OctetFree(&UTOct)
	yOct := GetOctetZero(PGS)
	defer OctetFree(&yOct)

	rtn := C.MPIN_CLIENT(C.int(hashType), C.int(epochDate), &mpinIdOct, RNG, &xOct, C.int(PIN), &tokenOct, &VOct, &UOct, &UTOct, &timePermitOct, &messageOct, C.int(epochTime), &yOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	xOut = OctetToBytes(&xOct)
	V = OctetToBytes(&VOct)
	U = OctetToBytes(&UOct)
	UT = OctetToBytes(&UTOct)
	y = OctetToBytes(&yOct)

	return errorCode, xOut[:], y[:], V[:], U[:], UT[:]
}

/*

Precompute calculate values for use by the client side of M-Pin Full

Args:

    token:  M-Pin token
    hashMPinId: hash of the M-Pin ID

Returns:

    errorCcode: error from the C function
    pc1: Precomputed value one
    pc2: Precomputed value two

Raises:

*/
func Precompute(token, hashMPinId []byte) (errorCode int, pc1, pc2 []byte) {
	// Form Octets
	hashMPinIdStr := string(hashMPinId)
	hashMPinIdOct := GetOctet(hashMPinIdStr)
	defer OctetFree(&hashMPinIdOct)
	tokenStr := string(token)
	tokenOct := GetOctet(tokenStr)
	defer OctetFree(&tokenOct)

	pc1Oct := GetOctetZero(GTS)
	defer OctetFree(&pc1Oct)
	pc2Oct := GetOctetZero(GTS)
	defer OctetFree(&pc2Oct)

	rtn := C.MPIN_PRECOMPUTE(&tokenOct, &hashMPinIdOct, nil, &pc1Oct, &pc2Oct)
	errorCode = int(rtn)

	// Convert octet to bytes
	pc1 = OctetToBytes(&pc1Oct)
	pc2 = OctetToBytes(&pc2Oct)

	return errorCode, pc1[:], pc2[:]
}

/*

GetG1Multiple calculates W=x*P where random x < q is the order of the group of points on the curve.
When RNG is nil x is passed in otherwise it is passed out.

If type=0 then P is. point on the curve or else P is an octet that has to be
mapped to the curve

Args:

    RNG: Pointer to cryptographically secure pseudo-random number generator instance
    type: determines type of action to be taken
    P: if type=0 a point in G1, else an octet to be mapped to G1

Returns:

    error_code: error from the C function
    x: an output internally randomly generated if RNG!=None, otherwise must be provided as an input
    W: W = x.P or W = x.M(P), where M(.) is a mapping when type = 0

Raises:

*/
func GetG1Multiple(RNG *C.csprng, typ int, x []byte, G []byte) (errorCode int, xOut, W []byte) {
	xStr := string(x)
	xOct := GetOctet(xStr)
	defer OctetFree(&xOct)
	GStr := string(G)
	GOct := GetOctet(GStr)
	defer OctetFree(&GOct)

	WOct := GetOctetZero(G1S)
	defer OctetFree(&WOct)

	rtn := C.MPIN_GET_G1_MULTIPLE(RNG, C.int(typ), &xOct, &GOct, &WOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	xOut = OctetToBytes(&xOct)
	W = OctetToBytes(&WOct)

	return errorCode, xOut[:], W[:]
}

/*

Server performs server side of the one-pass version of the M-Pin protocol. If Time
Permits are disabled, set epoch_date = 0, and UT and HTID are not generated and can
be set to nil. If Time Permits are enabled, and PIN error detection is OFF,
U and HID are not needed and can be set to nil. If Time Permits are enabled,
and PIN error detection is ON, U, UT, HID and HTID are all required.

Args:

    hashType: Hash function
    epoch_date: Date, in days since the epoch. Set to 0 if Time permits disabled
    server_secret: Server secret
    U: U = x.H(ID)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))
    V: V = -(x+y)(CS+TP), where CS is the reconstructed client secret and TP is the time permit
    mpinId: M-Pin ID or hash of the M-Pin ID in anonymous mode
    message: message to be signed
    epochTime: Epoch time in seconds

Returns:

    errorCode: error from the C function
    HID:  H(mpin_id). H is a map to a point on the curve
    HTID: H(mpin_id)+H(epoch_date|H(mpin_id)). H is a map to a point on the curve
    E: value to help the Kangaroos to find the PIN error, or nil if not required
    F: value to help the Kangaroos to find the PIN error, or nil if not required
    y: y = H(t|U) or y = H(t|UT) if Time Permits enabled used for debug

*/
func Server(hashType, epochDate, epochTime int, serverSecret, U, UT, V, mpinId, message []byte) (errorCode int, HID, HTID, y, E, F []byte) {
	serverSecretStr := string(serverSecret)
	serverSecretOct := GetOctet(serverSecretStr)
	defer OctetFree(&serverSecretOct)
	UStr := string(U)
	UOct := GetOctet(UStr)
	defer OctetFree(&UOct)
	UTStr := string(UT)
	UTOct := GetOctet(UTStr)
	defer OctetFree(&UTOct)
	VStr := string(V)
	VOct := GetOctet(VStr)
	defer OctetFree(&VOct)
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)
	messageStr := string(message)
	messageOct := GetOctet(messageStr)
	defer OctetFree(&messageOct)

	HIDOct := GetOctetZero(G1S)
	defer OctetFree(&HIDOct)
	HTIDOct := GetOctetZero(G1S)
	defer OctetFree(&HTIDOct)
	yOct := GetOctetZero(PGS)
	defer OctetFree(&yOct)
	EOct := GetOctetZero(GTS)
	defer OctetFree(&EOct)
	FOct := GetOctetZero(GTS)
	defer OctetFree(&FOct)

	rtn := C.MPIN_SERVER(C.int(hashType), C.int(epochDate), &HIDOct, &HTIDOct, &yOct, &serverSecretOct, &UOct, &UTOct, &VOct, &EOct, &FOct, &mpinIdOct, &messageOct, C.int(epochTime))
	errorCode = int(rtn)

	// Convert octet to bytes
	HID = OctetToBytes(&HIDOct)
	HTID = OctetToBytes(&HTIDOct)
	y = OctetToBytes(&yOct)
	E = OctetToBytes(&EOct)
	F = OctetToBytes(&FOct)

	return errorCode, HID[:], HTID[:], y[:], E[:], F[:]
}

/*

Kangaroo uses Pollards Kangaroos to find PIN error

Args:

    E: a member of the group GT
    F: a member of the group GT =  E^pin_error

Returns:

    PINError: error in PIN or 0 if Kangaroos failed

*/
func Kangaroo(E []byte, F []byte) (PINError int) {
	EStr := string(E)
	EOct := GetOctet(EStr)
	defer OctetFree(&EOct)
	FStr := string(F)
	FOct := GetOctet(FStr)
	defer OctetFree(&FOct)

	rtn := C.MPIN_KANGAROO(&EOct, &FOct)
	PINError = int(rtn)

	return PINError
}

/*

ServerKey calculates AES key on server side for M-Pin Full.Uses UT internally for the
key calculation or uses U if UT is set to None

Args:

    hashType: Hash function
    Z: Client-side Diffie-Hellman component
    serverSecret: server secret
    w: random number generated by the server
    HM: hash of the protocol transcript
    HID: H(mpin_id). H is a map to a point on the curve
    U: U = x.H(ID)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))

Returns:

    errorCode: error code from the C function
    serverAESKey: server AES key

*/
func ServerKey(hashType int, Z, serverSecret, w, HM, HID, U, UT []byte) (errorCode int, serverAESKey []byte) {
	ZStr := string(Z)
	ZOct := GetOctet(ZStr)
	defer OctetFree(&ZOct)
	serverSecretStr := string(serverSecret)
	serverSecretOct := GetOctet(serverSecretStr)
	defer OctetFree(&serverSecretOct)
	wStr := string(w)
	wOct := GetOctet(wStr)
	defer OctetFree(&wOct)
	HMStr := string(HM)
	HMOct := GetOctet(HMStr)
	defer OctetFree(&HMOct)
	HIDStr := string(HID)
	HIDOct := GetOctet(HIDStr)
	defer OctetFree(&HIDOct)
	UStr := string(U)
	UOct := GetOctet(UStr)
	defer OctetFree(&UOct)
	UTStr := string(UT)
	UTOct := GetOctet(UTStr)
	defer OctetFree(&UTOct)

	serverAESKeyOct := GetOctetZero(PAS)
	defer OctetFree(&serverAESKeyOct)

	rtn := C.MPIN_SERVER_KEY(C.int(hashType), &ZOct, &serverSecretOct, &wOct, &HMOct, &HIDOct, &UOct, &UTOct, &serverAESKeyOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	serverAESKey = OctetToBytes(&serverAESKeyOct)

	return errorCode, serverAESKey[:]
}

/*

ClientKey calculate AES key on client side for M-Pin Full

Args:

    hashType: Hash function
    pc1: precomputed input
    pc2: precomputed input
    PIN: PIN number
    r: locally generated random number
    x: locally generated random number
    HM: hash of the protocol transcript
    T: Server-side Diffie-Hellman component

Returns:

    error_code: error code from the C function
    clientAESKey: client AES key

*/
func ClientKey(hashType, PIN int, pc1, pc2, r, x, HM, T []byte) (errorCode int, clientAESKey []byte) {
	pc1Str := string(pc1)
	pc1Oct := GetOctet(pc1Str)
	defer OctetFree(&pc1Oct)
	pc2Str := string(pc2)
	pc2Oct := GetOctet(pc2Str)
	defer OctetFree(&pc2Oct)
	rStr := string(r)
	rOct := GetOctet(rStr)
	defer OctetFree(&rOct)
	xStr := string(x)
	xOct := GetOctet(xStr)
	defer OctetFree(&xOct)
	HMStr := string(HM)
	HMOct := GetOctet(HMStr)
	defer OctetFree(&HMOct)
	TStr := string(T)
	TOct := GetOctet(TStr)
	defer OctetFree(&TOct)

	clientAESKeyOct := GetOctetZero(PAS)
	defer OctetFree(&clientAESKeyOct)

	rtn := C.MPIN_CLIENT_KEY(C.int(hashType), &pc1Oct, &pc2Oct, C.int(PIN), &rOct, &xOct, &HMOct, &TOct, &clientAESKeyOct)
	errorCode = int(rtn)

	// Convert octet to bytes
	clientAESKey = OctetToBytes(&clientAESKeyOct)

	return errorCode, clientAESKey[:]
}

/*

GenerateRandomByte generates a random byte array

Args:

    RNG: Pointer to cryptographically secure pseudo-random number generator instance
    length: Gives length of random byte array

Returns:

    randomValue: Random value

*/
func GenerateRandomByte(RNG *C.csprng, randomLen int) (randomValue []byte) {
	randomOct := GetOctetZero(randomLen)
	defer OctetFree(&randomOct)

	C.generateRandom(RNG, &randomOct)

	// Convert octet to bytes
	randomValue = OctetToBytes(&randomOct)

	return randomValue[:]
}

/*

GenerateOTP returns a random six digit one time password

Args:

    RNG: Pointer to cryptographically secure pseudo-random number generator instance

Returns:

    otp: One time password

*/
func GenerateOTP(RNG *C.csprng) int {
	OTP := C.generateOTP(RNG)
	return int(OTP)
}

/*

AesGcmEncrypt performs AES-GCM Encryption

Args:

    K: AES Key
    IV: Initialization vector
    H: header
    P: Plaintext to be encrypted

Returns:

    C: resultant ciphertext
    T: MAC

*/
func AesGcmEncrypt(K, IV, H, P []byte) (C, T []byte) {
	KStr := string(K)
	KOct := GetOctet(KStr)
	defer OctetFree(&KOct)
	IVStr := string(IV)
	IVOct := GetOctet(IVStr)
	defer OctetFree(&IVOct)
	HStr := string(H)
	HOct := GetOctet(HStr)
	defer OctetFree(&HOct)
	PStr := string(P)
	POct := GetOctet(PStr)
	defer OctetFree(&POct)

	TOct := GetOctetZero(16)
	defer OctetFree(&TOct)
	lenC := len(PStr)
	COct := GetOctetZero(lenC)
	defer OctetFree(&COct)

	C.MPIN_AES_GCM_ENCRYPT(&KOct, &IVOct, &HOct, &POct, &COct, &TOct)

	// Convert octet to bytes
	C = OctetToBytes(&COct)
	T = OctetToBytes(&TOct)

	return C, T
}

/*

AesGcmDecrypt performs AES-GCM Deryption

Args:

    K: AES Key
    IV: Initialization vector
    H: header
    C: ciphertext

Returns:

    P: resultant plaintext
    T: MAC

*/
func AesGcmDecrypt(K, IV, H, C []byte) (P, T []byte) {
	KStr := string(K)
	KOct := GetOctet(KStr)
	defer OctetFree(&KOct)
	IVStr := string(IV)
	IVOct := GetOctet(IVStr)
	defer OctetFree(&IVOct)
	HStr := string(H)
	HOct := GetOctet(HStr)
	defer OctetFree(&HOct)
	CStr := string(C)
	COct := GetOctet(CStr)
	defer OctetFree(&COct)

	TOct := GetOctetZero(16)
	defer OctetFree(&TOct)
	lenP := len(CStr)
	POct := GetOctetZero(lenP)
	defer OctetFree(&POct)

	C.MPIN_AES_GCM_DECRYPT(&KOct, &IVOct, &HOct, &COct, &POct, &TOct)

	// Convert octet to bytes
	P = OctetToBytes(&POct)
	T = OctetToBytes(&TOct)

	return P, T
}

// PrintBinary print byte array as hex
func PrintBinary(array []byte) {
	for i := 0; i < len(array); i++ {
		fmt.Printf("%02x", array[i])
	}
	fmt.Printf("\n")
}

/*

Server1 performs first pass of the server side of the 3-pass version of the M-Pin protocol
If Time Permits are disabled, set epoch_date = 0, and UT and HTID are not generated
and can be set to nil. If Time Permits are enabled, and PIN error detection is OFF,
U and HID are not needed and can be set to nil. If Time Permits are enabled,
and PIN error detection is ON, U, UT, HID and HTID are all required.

Args:

    hashType: Hash function
    epochDate: Date, in days since the epoch. Set to 0 if Time permits disabled
    mpinId: M-Pin ID or hash of the M-Pin ID in anonymous mode

Returns:

    HID:  H(mpin_id). H is a map to a point on the curve
    HTID: H(mpin_id)+H(epoch_date|H(mpin_id)). H is a map to a point on the curve

*/
func Server1(hashType, epochDate int, mpinId []byte) (HID, HTID []byte) {
	// Form Octets
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)

	HIDOct := GetOctetZero(G1S)
	defer OctetFree(&HIDOct)
	HTIDOct := GetOctetZero(G1S)
	defer OctetFree(&HTIDOct)

	C.MPIN_SERVER_1(C.int(hashType), C.int(epochDate), &mpinIdOct, &HIDOct, &HTIDOct)

	// Convert octet to bytes
	HID = OctetToBytes(&HIDOct)
	HTID = OctetToBytes(&HTIDOct)

	return HID[:], HTID[:]
}

/*

Server2 performs server side of the three-pass version of the M-Pin protocol. If Time
Permits are disabled, set epoch_date = 0, and UT and HTID are not generated and can
be set to nil. If Time Permits are enabled, and PIN error detection is OFF,
U and HID are not needed and can be set to nil. If Time Permits are enabled,
and PIN error detection is ON, U, UT, HID and HTID are all required.

Args:

    epochDate: Date in days since the epoch. Set to 0 if Time permits disabled
    HID:  H(mpin_id). H is a map to a point on the curve
    HTID: H(mpin_id)+H(epoch_date|H(mpin_id)). H is a map to a point on the curve
    y: locally generated random number
    server_secret: Server secret
    U: U = x.H(ID)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))
    v: v = -(x+y)(CS+TP), where CS is the reconstructed client secret and TP is the time permit

Returns:

    errorCode: error from the C function
    E: value to help the Kangaroos to find the PIN error, or nil if not required
    F: value to help the Kangaroos to find the PIN error, or nil if not required

*/
func Server2(epochDate int, HID []byte, HTID []byte, y []byte, serverSecret []byte, U []byte, UT []byte, V []byte) (errorCode int, E, F []byte) {
	// Form Octets
	HIDStr := string(HID)
	HIDOct := GetOctet(HIDStr)
	defer OctetFree(&HIDOct)
	HTIDStr := string(HTID)
	HTIDOct := GetOctet(HTIDStr)
	defer OctetFree(&HTIDOct)
	yStr := string(y)
	yOct := GetOctet(yStr)
	defer OctetFree(&yOct)
	serverSecretStr := string(serverSecret)
	serverSecretOct := GetOctet(serverSecretStr)
	defer OctetFree(&serverSecretOct)
	UStr := string(U)
	UOct := GetOctet(UStr)
	defer OctetFree(&UOct)
	UTStr := string(UT)
	UTOct := GetOctet(UTStr)
	defer OctetFree(&UTOct)
	VStr := string(V)
	VOct := GetOctet(VStr)
	defer OctetFree(&VOct)

	EOct := GetOctetZero(GTS)
	defer OctetFree(&EOct)
	FOct := GetOctetZero(GTS)
	defer OctetFree(&FOct)
	rtn := C.MPIN_SERVER_2(C.int(epochDate), &HIDOct, &HTIDOct, &yOct, &serverSecretOct, &UOct, &UTOct, &VOct, &EOct, &FOct)

	errorCode = int(rtn)
	E = OctetToBytes(&EOct)
	F = OctetToBytes(&FOct)

	return errorCode, E[:], F[:]
}

/*

Client1 performs first pass of the client side of the three pass version of the M-Pin protocol.
If Time Permits are disabled then set epoch_date = 0.In this case UT is not generated0
and can be set to nil. If Time Permits are enabled, and PIN error detection is OFF,
U is not generated and can be set to nil. If Time Permits are enabled and PIN error
detection is ON then U and UT are both generated.

Args:

    hashType: Hash function
    epochDate: Date, in days since the epoch. Set to 0 if Time permits disabled
    mpinId: M-Pin ID
    RNG: cryptographically secure random number generator
    PIN: PIN entered by user
    token: M-Pin token
    timePermit: M-Pin time permit

Returns:

    errorCode: error from the C function
    x: Randomly generated integer if RNG!=nil, otherwise must be provided as an input
    U: U = x.H(ID)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))
    SEC: SEC = CS+TP, where CS is the reconstructed client secret and TP is the time permit

*/
func Client1(hashType, epochDate int, mpinId []byte, RNG *C.csprng, x []byte, PIN int, token []byte, timePermit []byte) (errorCode int, xOut, SEC, U, UT []byte) {
	// Form Octets
	mpinIdStr := string(mpinId)
	mpinIdOct := GetOctet(mpinIdStr)
	defer OctetFree(&mpinIdOct)

	xStr := string(x)
	xOct := GetOctet(xStr)
	defer OctetFree(&xOct)

	tokenStr := string(token)
	tokenOct := GetOctet(tokenStr)
	defer OctetFree(&tokenOct)

	timePermitStr := string(timePermit)
	timePermitOct := GetOctet(timePermitStr)
	defer OctetFree(&timePermitOct)

	SECOct := GetOctetZero(G1S)
	defer OctetFree(&SECOct)
	UOct := GetOctetZero(G1S)
	defer OctetFree(&UOct)
	UTOct := GetOctetZero(G1S)
	defer OctetFree(&UTOct)

	rtn := C.MPIN_CLIENT_1(C.int(hashType), C.int(epochDate), &mpinIdOct, RNG, &xOct, C.int(PIN), &tokenOct, &SECOct, &UOct, &UTOct, &timePermitOct)

	errorCode = int(rtn)
	// Convert octet to bytes
	xOut = OctetToBytes(&xOct)
	SEC = OctetToBytes(&SECOct)
	U = OctetToBytes(&UOct)
	UT = OctetToBytes(&UTOct)

	return errorCode, xOut[:], SEC[:], U[:], UT[:]
}

/*

Client2 performs second pass of the client side of the 3-pass version of the M-Pin protocol

Args:

    x: locally generated random number
    y: random challenge from server
    SEC: CS+TP, where CS is the reconstructed client secret and TP is the time permit

Returns:

    error_code: error from the C function
    V: V = -(x+y)(CS+TP), where CS is the reconstructed client secret and TP is the time permit

*/
func Client2(x []byte, y []byte, SEC []byte) (errorCode int, V []byte) {
	// Form Octets
	xStr := string(x)
	xOct := GetOctet(xStr)
	defer OctetFree(&xOct)
	yStr := string(y)
	yOct := GetOctet(yStr)
	defer OctetFree(&yOct)
	SECStr := string(SEC)
	SECOct := GetOctet(SECStr)
	defer OctetFree(&SECOct)

	rtn := C.MPIN_CLIENT_2(&xOct, &yOct, &SECOct)

	errorCode = int(rtn)
	// Convert octet to bytes
	V = OctetToBytes(&SECOct)

	return errorCode, V[:]
}

/*

HashAll hashs the session transcript

Args:

    hashType: Hash function
    hashMPinId: An octet pointer to the hash of the M-Pin ID
    U: U = x.H(mpin_id)
    UT: UT = x.(H(ID)+H(epoch_date|H(ID)))
    y: server challenge
    V: V = -(x+y)(CS+TP), where CS is the reconstructed client secret and TP is the time permit
    Z: client part response
    T: server part response

Returns:

    HM: hash of the input values

*/
func HashAll(hashType int, hashMPinId, U, UT, V, y, Z, T []byte) (HM []byte) {
	// Form Octets
	hashMPinIdStr := string(hashMPinId)
	hashMPinIdOct := GetOctet(hashMPinIdStr)
	defer OctetFree(&hashMPinIdOct)

	UStr := string(U)
	UOct := GetOctet(UStr)
	defer OctetFree(&UOct)

	UTStr := string(UT)
	UTOct := GetOctet(UTStr)
	defer OctetFree(&UTOct)

	yStr := string(y)
	yOct := GetOctet(yStr)
	defer OctetFree(&yOct)

	VStr := string(V)
	VOct := GetOctet(VStr)
	defer OctetFree(&VOct)

	ZStr := string(Z)
	ZOct := GetOctet(ZStr)
	defer OctetFree(&ZOct)

	TStr := string(T)
	TOct := GetOctet(TStr)
	defer OctetFree(&TOct)

	HMOct := GetOctetZero(hashBytes)
	defer OctetFree(&HMOct)

	// Hash values
	C.MPIN_HASH_ALL(C.int(hashType), &hashMPinIdOct, &UOct, &UTOct, &VOct, &yOct, &ZOct, &TOct, &HMOct)

	// Convert octet to bytes
	HM = OctetToBytes(&HMOct)

	return HM[:]
}
